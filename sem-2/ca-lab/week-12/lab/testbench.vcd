$date
	Sun Jun 18 23:44:03 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! shift_resultout [31:0] $end
$var wire 32 " aluresout [31:0] $end
$var wire 32 # GP_DATA_INout [31:0] $end
$var reg 1 $ clock $end
$var reg 1 % reset $end
$scope module UUT $end
$var wire 5 & Cad [4:0] $end
$var wire 1 $ Clock $end
$var wire 32 ' Instruction [31:0] $end
$var wire 1 % Reset $end
$var wire 32 ( SrcA [31:0] $end
$var wire 32 ) SrcB [31:0] $end
$var wire 32 * data_in [31:0] $end
$var wire 32 + next_SrcA [31:0] $end
$var wire 3 , shift_type [2:0] $end
$var wire 32 - shift_result [31:0] $end
$var wire 32 . immediate_out [31:0] $end
$var wire 1 / i $end
$var wire 32 0 data_out_B [31:0] $end
$var wire 32 1 data_out_A [31:0] $end
$var wire 4 2 bf [3:0] $end
$var wire 1 3 bcres $end
$var wire 32 4 alu_result [31:0] $end
$var wire 4 5 af [3:0] $end
$var wire 2 6 PC_MUX_Select [1:0] $end
$var wire 32 7 PC [31:0] $end
$var wire 32 8 Mout [31:0] $end
$var wire 32 9 I [31:0] $end
$var wire 1 : GP_WE_Org $end
$var wire 2 ; GP_MUX_SEL [1:0] $end
$var wire 1 < E $end
$var wire 1 = DM_WE $end
$var wire 1 > ALU_MUX_SEL $end
$var reg 32 ? GP_DATA_INout [31:0] $end
$var reg 1 @ GP_WE $end
$var reg 32 A aluresout [31:0] $end
$var reg 32 B next_PC [31:0] $end
$var reg 32 C next_SrcB [31:0] $end
$var reg 32 D shift_resultout [31:0] $end
$scope module ALU $end
$var wire 32 E SrcA [31:0] $end
$var wire 32 F SrcB [31:0] $end
$var wire 1 / i $end
$var wire 4 G af [3:0] $end
$var reg 32 H Alures [31:0] $end
$var reg 1 I ovfalu $end
$upscope $end
$scope module BCE $end
$var wire 32 J SrcA [31:0] $end
$var wire 32 K SrcB [31:0] $end
$var wire 4 L BF [3:0] $end
$var reg 1 3 bcres $end
$upscope $end
$scope module GP $end
$var wire 1 @ WE $end
$var wire 5 M addrA [4:0] $end
$var wire 5 N addrB [4:0] $end
$var wire 5 O addrC [4:0] $end
$var wire 1 $ clk $end
$var wire 32 P data_in_C [31:0] $end
$var reg 32 Q data_out_A [31:0] $end
$var reg 32 R data_out_B [31:0] $end
$upscope $end
$scope module ID $end
$var wire 1 > ALU_MUX_SEL $end
$var wire 5 S Cad [4:0] $end
$var wire 1 : GP_WE $end
$var wire 1 T alu $end
$var wire 5 U sa [4:0] $end
$var wire 5 V rt [4:0] $end
$var wire 5 W rs [4:0] $end
$var wire 5 X rd [4:0] $end
$var wire 6 Y opc [5:0] $end
$var wire 1 Z j $end
$var wire 26 [ imm [25:0] $end
$var wire 26 \ iindex [25:0] $end
$var wire 6 ] fun [5:0] $end
$var wire 2 ^ PC_MUX_Select [1:0] $end
$var wire 32 _ Instruction [31:0] $end
$var wire 1 / I $end
$var wire 2 ` GP_MUX_SEL [1:0] $end
$var wire 1 = DM_WE $end
$var wire 4 a Bf [3:0] $end
$var wire 4 b Af [3:0] $end
$var reg 3 c Shift_type [2:0] $end
$upscope $end
$scope module IEU $end
$var wire 1 / U $end
$var wire 16 d imm [15:0] $end
$var wire 32 e res [31:0] $end
$upscope $end
$scope module M $end
$var wire 1 $ Clock $end
$var wire 32 f Next_PC [31:0] $end
$var wire 32 g PC_out [31:0] $end
$var wire 1 % Reset $end
$var wire 1 = S $end
$var wire 32 h data_addr_in [31:0] $end
$var wire 32 i data_in [31:0] $end
$var reg 1 < E $end
$var reg 32 j I [31:0] $end
$var reg 32 k Iout [31:0] $end
$var reg 32 l Mout [31:0] $end
$var reg 32 m pc [31:0] $end
$var integer 32 n i [31:0] $end
$upscope $end
$scope module S $end
$var wire 2 o Funct [1:0] $end
$var wire 32 p Number [31:0] $end
$var wire 5 q Shift_Amount [4:0] $end
$var reg 32 r Result [31:0] $end
$var integer 32 s i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx s
bx r
bz q
bz p
bx o
b100000 n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bxzzzzzzzzzzzzzzzz e
bz d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
b0xxxxxxxxxxxxxxxx [
xZ
bx Y
bx X
bx W
bx V
bx U
xT
bx S
bx R
bx Q
bx P
bx O
bz N
bz M
bx L
bz K
bz J
xI
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
x@
bx ?
x>
x=
x<
bx ;
x:
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
x3
bx 2
bx 1
bx 0
x/
bxzzzzzzzzzzzzzzzz .
bx -
bx ,
bx +
bz *
bz )
bz (
bz '
bx &
0%
0$
bx #
bx "
bx !
$end
#10
b0 #
b0 ?
b0 P
b0 h
0@
b0 B
b0 f
b0 7
b0 g
b0 m
0<
1%
1$
#20
0%
0$
#30
x@
1<
1$
#40
0$
#50
0@
0<
1$
#60
0$
#70
x@
1<
1$
#80
0$
#90
0@
0<
1$
#100
0$
#110
x@
1<
1$
#120
0$
